#!/bin/bash

# Pre-commit hook for training-lens
set -e

echo "Running pre-commit checks..."

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Get list of staged Python files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "No Python files staged for commit."
    exit 0
fi

echo "Checking staged Python files: $STAGED_FILES"

# Check if required tools are installed
command -v black >/dev/null 2>&1 || { echo "Error: black is not installed. Run: pip install black"; exit 1; }
command -v isort >/dev/null 2>&1 || { echo "Error: isort is not installed. Run: pip install isort"; exit 1; }
command -v flake8 >/dev/null 2>&1 || { echo "Error: flake8 is not installed. Run: pip install flake8"; exit 1; }

# Run black formatting
echo "Running black..."
black --check $STAGED_FILES
if [ $? -ne 0 ]; then
    echo "Black formatting failed. Run 'black $STAGED_FILES' to fix."
    exit 1
fi

# Run isort
echo "Running isort..."
isort --check-only $STAGED_FILES
if [ $? -ne 0 ]; then
    echo "Import sorting failed. Run 'isort $STAGED_FILES' to fix."
    exit 1
fi

# Run flake8
echo "Running flake8..."
flake8 $STAGED_FILES
if [ $? -ne 0 ]; then
    echo "Linting failed. Fix the issues above."
    exit 1
fi

# Run basic pytest if test files are staged
TEST_FILES=$(echo "$STAGED_FILES" | grep -E 'test_.*\.py$' || true)
if [ ! -z "$TEST_FILES" ]; then
    echo "Running tests for staged test files..."
    python -m pytest $TEST_FILES -v
    if [ $? -ne 0 ]; then
        echo "Tests failed."
        exit 1
    fi
fi

echo "All pre-commit checks passed!"
exit 0