name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy

      - name: Run black
        run: black --check training_lens tests

      - name: Run isort
        run: isort --check-only training_lens tests

      - name: Run flake8
        run: flake8 training_lens tests --max-line-length=120

      - name: Run mypy
        run: mypy training_lens --ignore-missing-imports

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        pydantic-version: ['1.10.13', '2.5.0']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install without unsloth on macOS, with CPU unsloth on Linux
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            pip install -e ".[dev]"
          else
            pip install -e ".[dev,unsloth-cpu]"
          fi
          # Override pydantic version for matrix testing
          pip install pydantic==${{ matrix.pydantic-version }}

      - name: Run tests
        run: |
          pytest tests/ -v --cov=training_lens --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest' && matrix.pydantic-version == '2.5.0'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-integration-
            ${{ runner.os }}-pip-

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run example scripts
        run: |
          # Test that examples can at least be imported
          python -c "import examples.basic_training_example"
          python -c "import examples.analysis_example"

      - name: Test CLI commands
        run: |
          training-lens --help
          training-lens train --help
          training-lens analyze --help

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/